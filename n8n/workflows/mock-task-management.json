{
    "name": "Mock Task Management",
    "nodes": [
        {
            "parameters": {
                "rule": {
                    "interval": [
                        {
                            "field": "cronExpression",
                            "expression": "0 */4 * * *"
                        }
                    ]
                }
            },
            "name": "Every 4 Hours",
            "type": "n8n-nodes-base.cron",
            "typeVersion": 1,
            "position": [
                240,
                300
            ]
        },
        {
            "parameters": {
                "url": "http://192.168.55.168:3001/api/tasks",
                "options": {
                    "qs": {
                        "userId": "1",
                        "status": "pending"
                    }
                }
            },
            "name": "Get Pending Tasks",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.1,
            "position": [
                460,
                300
            ]
        },
        {
            "parameters": {
                "conditions": {
                    "options": {
                        "caseSensitive": true,
                        "leftValue": "",
                        "typeValidation": "loose"
                    },
                    "conditions": [
                        {
                            "id": "1",
                            "leftValue": "={{ $json.data.length }}",
                            "rightValue": 0,
                            "operator": {
                                "type": "number",
                                "operation": "gt"
                            }
                        }
                    ],
                    "combinator": "and"
                }
            },
            "name": "Has Pending Tasks?",
            "type": "n8n-nodes-base.if",
            "typeVersion": 2,
            "position": [
                680,
                300
            ]
        },
        {
            "parameters": {
                "jsCode": "// Mock task planning since AI endpoint is having issues\nconst tasks = $node['Get Pending Tasks'].json.data;\nconst currentHour = new Date().getHours();\nconst isAfter5PM = currentHour >= 17;\n\n// Enhanced task analysis\nconst highPriorityTasks = tasks.filter(task => task.priority === 'high').length;\nconst mediumPriorityTasks = tasks.filter(task => task.priority === 'medium').length;\nconst dueTodayTasks = tasks.filter(task => {\n  if (!task.due_date) return false;\n  const dueDate = new Date(task.due_date);\n  const today = new Date();\n  return dueDate.toDateString() === today.toDateString();\n}).length;\n\nif (tasks && tasks.length > 0 && isAfter5PM) {\n  console.log(`🔔 Evening Task Reminder: ${tasks.length} pending tasks`);\n  console.log(`📊 Task Analysis: ${highPriorityTasks} high, ${mediumPriorityTasks} medium priority`);\n  console.log(`⏰ Due today: ${dueTodayTasks} tasks`);\n  \n  const taskSummary = tasks.map(task => {\n    const dueInfo = task.due_date ? ` (Due: ${new Date(task.due_date).toLocaleDateString()})` : '';\n    return `- ${task.title} (${task.priority} priority)${dueInfo}`;\n  }).join('\\n');\n  \n  console.log('Pending Tasks:');\n  console.log(taskSummary);\n  \n  // Generate AI-like recommendation\n  let recommendation = '💡 AI Recommendation: ';\n  if (highPriorityTasks > 0) {\n    recommendation += `Focus on ${highPriorityTasks} high-priority task(s) first. `;\n  }\n  if (dueTodayTasks > 0) {\n    recommendation += `${dueTodayTasks} task(s) due today need immediate attention. `;\n  }\n  recommendation += 'Consider time-blocking for better productivity!';\n  \n  return {\n    success: true,\n    reminder_sent: true,\n    task_count: tasks.length,\n    high_priority: highPriorityTasks,\n    medium_priority: mediumPriorityTasks,\n    due_today: dueTodayTasks,\n    tasks: tasks,\n    message: `🤖 AI Copilot Evening Briefing\\n\\n📋 You have ${tasks.length} pending tasks:\\n${taskSummary}\\n\\n📊 Priority Breakdown:\\n• High: ${highPriorityTasks}\\n• Medium: ${mediumPriorityTasks}\\n• Due Today: ${dueTodayTasks}\\n\\n${recommendation}`,\n    timestamp: new Date().toISOString(),\n    ai_powered: true\n  };\n} else if (tasks && tasks.length > 0) {\n  console.log(`📋 ${tasks.length} pending tasks found, but not evening time yet`);\n  console.log(`📊 Quick analysis: ${highPriorityTasks} high priority, ${dueTodayTasks} due today`);\n  return {\n    success: true,\n    reminder_sent: false,\n    task_count: tasks.length,\n    high_priority: highPriorityTasks,\n    due_today: dueTodayTasks,\n    message: 'Tasks monitored, evening briefing will be sent after 5 PM'\n  };\n} else {\n  console.log('✅ No pending tasks found - All clear!');\n  return {\n    success: true,\n    reminder_sent: false,\n    task_count: 0,\n    message: '🎉 All tasks completed! Excellent productivity today!'\n  };\n}"
            },
            "name": "Smart Task Reminder",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                900,
                300
            ]
        }
    ],
    "connections": {
        "Every 4 Hours": {
            "main": [
                [
                    {
                        "node": "Get Pending Tasks",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Get Pending Tasks": {
            "main": [
                [
                    {
                        "node": "Has Pending Tasks?",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Has Pending Tasks?": {
            "main": [
                [
                    {
                        "node": "Smart Task Reminder",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    }
}